#!/usr/bin/python

import ConfigParser
from optparse import OptionParser
import os
import sys

general = {}
outputs = {}
builddirs = {}

class Output(object):
    '''Single output binary of the build process'''
    def __init__(self, cp, section):
        self.outtype, self.name = section.split(':', 1)
	if section in outputs:
	    raise KeyError('Duplicate definition of [%s]' % self.name)
        self.subdir = cp.get(section, 'subdir')
        self.sources = cp.get(section, 'sources').split()
        self.localdep = cp.get(section, 'localdep').split()
        self.outpath = {}
        self.extraldflags = {}
        self.objs = {}
        self.deps = {}
        for v in general['variants'].split():
            if self.outtype == 'lib':
                self.outpath[v] = "build/lib/lib%s_%s$(EXT_%s).so" % \
                        (general['prefix'], self.name, v)
                self.extraldflags[v] = "-Wl,-soname=lib%s_%s$(EXT_%s).so" % \
                        (general['prefix'], self.name, v)
            elif self.outtype == 'test':
                self.outpath[v] = "build/tests/%s$(EXT_%s)" % \
                        (self.name, v)
                self.extraldflags[v] = ""
            elif self.outtype == 'app':
                self.outpath[v] = "build/bin/%s$(EXT_%s)" % \
                        (self.name, v)
                self.extraldflags[v] = ""
            else:
                raise ValueError('Unknown output type [%s]' % self.outtype)
            builddirs[os.path.dirname(self.outpath[v])] = 1
            self.objs[v] = []
            self.deps[v] = []
            for s in self.sources:
                if s[-2:] != '.c':
                    raise ValueError('Non C source') # Don't know how to handle
                src = self.subdir + '/' + s
                obj = "build/%s$(EXT_%s).o" % (src[:-2], v)
                dep = "build/%s$(EXT_%s).d" % (src[:-2], v)
                builddirs[os.path.dirname(obj)] = 1
                self.objs[v].append(obj)
                self.deps[v].append(dep)
            outputs[section] = self

    def write_makefile(self, f):
        for v in general['variants'].split():
            f.write('''
all-%(variant)s: %(outpath)s

%(outpath)s: %(objs)s %(localdeps)s $(__makefiles) | build-dirs
\t$(CC) -o $@ %(objs)s $(LDFLAGS_%(outtype)s) $(LDFLAGS_%(variant)s) %(extraldflags)s %(locallibs)s

%(objs)s: build/%%$(EXT_%(variant)s).o: %%.c $(__makefiles) | build-dirs
\t$(CC) $(CFLAGS_%(outtype)s) $(CFLAGS_%(variant)s) -c -MMD -o $@ $<

-include %(deps)s
'''		% {
                    'variant' : v,
                    'objs' : ' '.join(self.objs[v]),
                    'deps' : ' '.join(self.deps[v]),
                    'outpath' : self.outpath[v],
                    'extraldflags' : self.extraldflags[v],
                    'outtype' : self.outtype,
                    'localdeps' : ' '.join([outputs['lib:' + x].outpath[v] \
                            for x in self.localdep]),
                    'locallibs' : ' '.join(["-l%s_%s$(EXT_%s)" % (general['prefix'], x, v) \
                            for x in self.localdep]),
                    })
            # Additional rules
            if self.outtype == 'test':
                f.write('''
check-%(variant)s: check-%(variant)s-%(name)s

check-%(variant)s-%(name)s: %(outpath)s
\t%(outpath)s
'''             % {
                    'variant' : v,
                    'name' : self.name,
                    'outpath' : self.outpath[v],
                    })

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-o', '--output', dest='output', help='Select output file', default='mk')
    opts, args = parser.parse_args()
    if len(args) != 1:
        parser.error('Input file required')
    cp = ConfigParser.ConfigParser({
	# Optional keys in each output section have default values provided
        'localdep' : ''
        })
    cp.read(args[0])
    for s in cp.sections():
        if s == "general":
            general.update(cp.items(s))
        else:
            Output(cp, s)
    f = open(opts.output, "w")
    f.write('''
# DO NOT EDIT! Automatically generated by %s
''' % sys.argv[0])
    for o in outputs.values():
	o.write_makefile(f)
    # Write common part
    f.write('''
all: build-dirs

%(builddirs)s:
\tmkdir -p $@

.PHONY: build-dirs
build-dirs: %(builddirs)s
''' % {
	'builddirs' : ' '.join(builddirs.keys())
	})
    f.close()
